{
  
    
        "post0": {
            "title": "Hey Ruby, how's your TOML?",
            "content": "Hey Ruby, how’s your TOML? . At BetterStack, we use Ruby for a part of our infrastructure orchestration, and we use TOML for our script configuration needs. As you may know, TOML (Tom’s Obvious, Minimal Language) is a configuration file format that’s easy to read due to obvious semantics. . Since I dabble into Rust development a little and TOML is pretty popular over there, selecting it instead of YAML or JSON was an easy choice, due to its ease of use and straightforward syntax. Unfortunately, the state of TOML libraries in Ruby is a bit more complex at this point. . NOTE: This article is written at the end of 2021. The landscape of TOML gems may be a bit different, so treat the information presented here accordingly. . gem install toml and move on…? . TOML is a versioned file format with it’s first major version (v1.0.0) released at the beginning of 2021. Checking out the project wiki shows that there’s a lot of implementations that are compliant with the v1.0.0 spec. However, Ruby shows up elsewhere in the list, five times total: . tomlrb gem by @fbernier stated as v1.0.0-rc.1 compliant, and | toml-rb gem by @emancu) stated as v0.5.0 compliant | . followed by . toml2 gem by @charliesome, | toml gem by @jm, and | tomlp gem by @sandeepravi, all of which have unknown compliance based on the wiki. | . A quick search on RubyMine lets us know there are even more gems - toml-ruby, multi_toml, ptolemy, tock, toml-rb-hs, toby, to mention a few showing up at the top. . Most of these additional gems have releases during 2013 (what a year for TOML that must’ve been!) - toby and toml-rb-hs are the exceptions, and toml-rb-hs is a derailed fork of toml-rb. . Quite a mess! . What’s in the box? . Let’s inspect tomlrb, toml-rb, toml2, toml, tomlp, and toby, as the remaining is clearly outdated and don’t support anything near the v1.0.0 TOML spec. . Most of these gems use some kind of grammar or a parsing library - like racc/yacc, citrus, or parslet. This makes sense - TOML even has the language specification in the ABNF format present in the root of the project, so it should be fairly straightforward to use that definition as a base for a decoder/encoder library. . Starting from the oldest, the tomlp gem (sandeepravi/tomlp) uses the treewtop grammar and was updated 9 years ago. Although the author says (in bold and itallics) that You can use this in production, I’m skipping this one. . Moving on to the toml2 gem (haileys/toml2), also updated 9 years ago, it’s interesting to note that there’s no grammar present in this library - only a five-line, 340-character long, perfectly aligned 😎 ruby eval block. There’s also a note that this gem is a gold plated, production grade, high performance parser, which makes me a little sad to ignore it moving forward. . Here’s a little table summarizing the stats of the remaining libraries (ordered alphabetically): . Gem Grammar Last update commits in the last 12 month RubyGems Downloads (all/latest version) . toby | Citrus | Jan 31, 2021 | 24 | 723 / 10,205 | . toml | Parslet | Dec 1, 2021 | 11 | 667,568 / 16,041,996 | . toml-rb | Citrus | Nov 22, 2021 | 30 | 238,443 / 18,650,046 | . tomlrb | Racc | Feb 19, 2021 | 6 | 2,866,930/23,665,130 | . It’s interesting to see that the total downloads are pretty similar between the top three gems - and none of them are abandonned. But it’s still not clear how one should select which gem to use… . Roll your own! . The obvious solution is to take the ABNF definition, transform it to a Ruby regex or to a different known format, and roll a solution off that. I even have a great name - yatoml, as in Yet Another TOML. A great idea, right? … Right? . . TOML compliance &amp; performance comparison . Since I don’t want to pollute the space with yet another gem library, I want to use (and optionally improve) the most mature gem. I was able to compare the decoder compliance against the v1.0.0 TOML standard using the toml-test test suite. I’ll summarize the results below, but if you wanted to run this yourself, here’s the repository: toml-comparison. . I measured the compliance against the latest toml-test suite, as well as a very simple performance benchmark (I compared the time it takes to run the test-suite on my MacBook Air). . There are 306 test cases in toml-test. Here are the comparison results: . Gem Failed cases Duration* . toby | 89 | 121.9s | . toml | 89 | 58.97s | . toml-rb | 80 | 134.45s | . tomlrb | 23 | 41.1s | . *I averaged three test runs for each gem. . Based on these test runs, tomlrb comes on the top when comparing both v1.0.0 TOML spec compliance as well as speed performance. . . Other notable facts: toby, toml, and toml-rb convert all times to a Time or DateTime class, while tomlrb uses it’s internal classes LocalDate, LocalTime, and LocalDateTime. On a similar note, only toby implements internal classes for Binary, Octal and Hexadecimal numbers. All of these decisions make sense to me - the trade-off is usually between being more explicit and being easier to use. . I didn’t test the encoders - tomlrb doesn’t have one, and it seemed superfluous since the decoders are not 100% v1.0.0 compliant. . . Great, so what now? . Based on my amateur comparison, it would seem tomlrb is the closest gem to get to v1.0.0. . So let’s get them there! . I submitted a PR to the tomlrb gem to cover a few of the remaining 23 cases, and hopefully with combined forces we can get it to 100%. The fact that it’s the fastest parser I tested is a nice cherry on top. .",
            "url": "https://gyfis.github.io/blog/markdown/2022/01/01/ruby-toml.html",
            "relUrl": "/markdown/2022/01/01/ruby-toml.html",
            "date": " • Jan 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://gyfis.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://gyfis.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gyfis.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}